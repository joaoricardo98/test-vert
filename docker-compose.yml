version: "3"

services:
  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
    env_file:
      - scheduler/model.env
    volumes:
      - ./scheduler/:/usr/src/app/
    command: python main.py
    depends_on:
    - kafka-ui
    - kafka
    networks:
      - vert-net

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - api/model.env
    ports:
      - 8000:8000
    volumes:
      - ./api/:/usr/src/app/
    command: sh -c "python stock/manage.py migrate && python stock/manage.py runserver 0.0.0.0:8000"
    networks:
      - vert-net
    depends_on:
      - db
      - kafka

  db:
    image: postgres:16.2-alpine3.19
    env_file:
      - api/model.env
    ports:
      - 5432:5432
    networks:
      - vert-net

  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - vert-net

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - vert-net

  kafka-ui:
    image: provectuslabs/kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=VERT
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - vert-net

networks:
  vert-net:
    name: vert-net
